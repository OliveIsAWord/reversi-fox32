# NOTE: We store a lot of array values as `u32[N]` rather than more appropriate types because of our unfortunate way of compiling aggregate values. Each value of a `u8[16]` will be individually stored in a register, and the current compiler does not have stack spilling implemented.

extern fn millis() usize

extern fn get_reversi_menu() void^

fn message_box_about(anon window: Window^):
    .message_box(
        line_1: "   Reversi  v0.1.2   " # NOTE: Update this as appropriate!
        line_2: "(c) 2025 OliveIsAWord"
        line_3: "under the MIT license"
    )

const WINDOW_WIDTH = 255
const WINDOW_HEIGHT = 255

const COLOR_BACKGROUND = 0x6688aa
const COLOR_EDGE = 0x334466
const COLOR_BLACK = 0x222233
const COLOR_WHITE = 0xffeebb

const STONE_RADIUS = 13
const PREVIEW_RADIUS_DEFAULT = 2

const MOVE_SPEED_MEDIUM = 60u32

fn color(anon bytes: usize) Color:
    Color(
        r: (bytes >> 16) as u8
        g: (bytes >> 8) as u8
        b: bytes as u8
        a: 0xff_u8
    )

fn draw_vertical_line_to_overlay(_, x: usize, y: usize, height: usize, color: Color, overlay: u8):
    draw_filled_rectangle_to_overlay(:x, :y, width: 1, :height, :color, :overlay)
    
fn draw_horizontal_line_to_overlay(_, x: usize, y: usize, width: usize, color: Color, overlay: u8):
    draw_filled_rectangle_to_overlay(:x, :y, :width, height: 1, :color, :overlay)

# x and y are the center of the circle
fn draw_circle_to_overlay(
    _
    x: usize
    y: usize
    radius: usize
    color: Color
    overlay: u8
):
    let mut y1 = y - radius
    while y1 <= y + radius:
        defer y1 = y1 + 1
        let mut x1 = x - radius
        while x1 <= x + radius:
            defer x1 = x1 + 1
            let x_center = x - x1
            let y_center = y - y1
            # using `<` instead of `<=` here makes more visually appealing circles, i think
            if x_center * x_center + y_center * y_center < radius * radius:
                draw_pixel_to_overlay(x: x1, y: y1, :color, :overlay)

struct App:
    window: Window^mut
    board: Board
    previous_board: Board
    # top 16 bits is squares, bottom 16 bits is per square
    anim_timer: u32
    # animation speed in stones / ms / 2^16
    anim_speed: u32
    # top 8 bits is x, bottom 8 bits is y
    prev_move: u16
    prev_millis: usize
    preview_radius: usize

fn new_app(window: Window^mut) App:
    let mut app = App(
        :window
        previous_board: board_empty()
        board: board_new()
        anim_timer: -1u32
        anim_speed: MOVE_SPEED_MEDIUM
        prev_move: 0u16
        prev_millis: millis()
        preview_radius: PREVIEW_RADIUS_DEFAULT
    )
    app@.clear_display()
    app@mut._redraw_board()
    app.previous_board = app.board
    app

fn clear_display(anon _: App^):
    let background_color = color(COLOR_BACKGROUND)
    let edge_color = color(COLOR_EDGE)
    self^.window.fill_window(background_color)
    let overlay = self^.window^.overlay
    let mut i = 31
    while i < WINDOW_WIDTH:
        draw_vertical_line_to_overlay(x: i, y: 16, height: WINDOW_HEIGHT, color: edge_color, :overlay)
        draw_horizontal_line_to_overlay(x: 0, y: i + 16, width: WINDOW_WIDTH, color: edge_color, :overlay)
        i = i + 32

fn app_draw(anon _: App^mut):
    let now = millis()
    let dt = (now - self^.prev_millis) as u32 
    self^.prev_millis = now
    let prev_anim = self^.anim_timer
    let anim = prev_anim.u32_saturating_add(dt * self^.anim_speed)
    self^.anim_timer = if anim >= 0x0100_0000u32: -1u32 else anim
    let x = (self^.prev_move >> 8u16) as u8
    let y = self^.prev_move as u8
    let i = (anim >> 16u32) as u8
    let anim_per_stone = anim as u16
    let prev_i = (prev_anim >> 16u32) as u8
    let prev_anim_per_stone = prev_anim as u16
    :
        let mut finished_i = prev_i
        while finished_i < i:
            defer finished_i = finished_i + 1u8
            let i = finished_i
            if i == 0u8:
                .draw_stone_finished(:x, :y)
            else if i < 8u8:
                let Z = 0u8
                .draw_stone_finished(x: x + i, y: y + Z)
                .draw_stone_finished(x: x + i, y: y + i)
                .draw_stone_finished(x: x + Z, y: y + i)
                .draw_stone_finished(x: x - i, y: y + i)
                .draw_stone_finished(x: x - i, y: y + Z)
                .draw_stone_finished(x: x - i, y: y - i)
                .draw_stone_finished(x: x + Z, y: y - i)
                .draw_stone_finished(x: x + i, y: y - i)
    if i == 0u8:
        .draw_stone_flip(:x, :y, :anim_per_stone)
    else if i < 8u8:
        let Z = 0u8
        .draw_stone_flip(x: x + i, y: y + Z, :anim_per_stone)
        .draw_stone_flip(x: x + i, y: y + i, :anim_per_stone)
        .draw_stone_flip(x: x + Z, y: y + i, :anim_per_stone)
        .draw_stone_flip(x: x - i, y: y + i, :anim_per_stone)
        .draw_stone_flip(x: x - i, y: y + Z, :anim_per_stone)
        .draw_stone_flip(x: x - i, y: y - i, :anim_per_stone)
        .draw_stone_flip(x: x + Z, y: y - i, :anim_per_stone)
        .draw_stone_flip(x: x + i, y: y - i, :anim_per_stone)

fn draw_stone_finished(anon _: App^mut, x: u8, y: u8):
    if x < 8u8 and y < 8u8 and self^.board@.get_stone(:x, :y) & 2u8 != 0u8 and self^.previous_board@.get_stone(:x, :y) != self^.board@.get_stone(:x, :y):
        self^.previous_board@mut.set_stone(:x, :y, stone: self^.board@.get_stone(:x, :y)) 
        .draw_stone_generic(:x, :y, radius: STONE_RADIUS)

fn draw_stone_flip(anon _: App^mut, x: u8, y: u8, anim_per_stone: u16):
    if x < 8u8 and y < 8u8 and self^.board@.get_stone(:x, :y) & 2u8 != 0u8 and self^.previous_board@.get_stone(:x, :y) != self^.board@.get_stone(:x, :y):
        let radius = anim_per_stone as usize * STONE_RADIUS / 0x1_0000
        .draw_stone_generic(:x, :y, :radius)

fn draw_stone_generic(anon _: App^mut, x: u8, y: u8, radius: usize):
    if x < 8u8 and y < 8u8:
        draw_circle_to_overlay(
            :self^.window^.overlay
            x: 32 * x as usize + 15
            y: 32 * y as usize + 31
            :radius
            color:
                if self^.previous_board.turn:
                    color(COLOR_WHITE)
                else:
                    color(COLOR_BLACK)
        )

fn _reset_preview_radius(anon _: App^mut, anon new_radius: usize):
    defer self^.preview_radius = new_radius
    let old_radius = self^.preview_radius
    let mut x = 0_u8
    while x < 8_u8:
        defer x = x + 1_u8
        let mut y = 0_u8
        while y < 8_u8:
            defer y = y + 1_u8
            if self^.board@.get_stone(:x, :y) == STONE_PLACE:
                if old_radius > new_radius:
                    ._redraw_stone(:x, :y, old_stone: STONE_PLACE, stone: STONE_EMPTY)
                self^.preview_radius = new_radius
                ._redraw_stone(:x, :y, old_stone: STONE_EMPTY, stone: STONE_PLACE)
                self^.preview_radius = old_radius

fn _redraw_stone(anon _: App^mut, x: u8, y: u8, old_stone: u8, stone: u8): if old_stone != stone or stone == STONE_PLACE:
    let overlay = self^.window^.overlay
    let x = 32 * x as usize + 15
    let y = 32 * y as usize + 31
    let mut radius = 13
    let color = if stone == STONE_WHITE:
        color(COLOR_WHITE)
    else if stone == STONE_BLACK:
        color(COLOR_BLACK)
    else if stone == STONE_PLACE:
        if old_stone & 2_u8 != 0_u8:
            draw_circle_to_overlay(
                :x
                :y
                :radius
                color: color(COLOR_BACKGROUND)
                :overlay
            )
        radius = self^.preview_radius
        if self^.board.turn:
            color(COLOR_WHITE)
        else:
            color(COLOR_BLACK)
    else if stone == STONE_EMPTY:
        if old_stone == STONE_PLACE:
            radius = self^.preview_radius
        color(COLOR_BACKGROUND)
    else:
        panic("unknown stone to draw")
        color(0)
    draw_circle_to_overlay(
        :x
        :y
        :radius
        :color
        :overlay
    )

fn _redraw_board(anon _: App^mut):
    let mut y = 0_u8
    while y < 8_u8:
        defer y = y + 1_u8
        let mut x = 0_u8
        while x < 8_u8:
            defer x = x + 1_u8
            let stone = self^.board@.get_stone(:x, :y)
            let old_stone = self^.previous_board@.get_stone(:x, :y)
            ._redraw_stone(:x, :y, :old_stone, :stone)

fn make_score_string(score: usize) u8[12]:
    #             123456789012
    let source = "    ** - **"
    let mut score_string = (null() as u8[12]^)^
    copy_string(:source, dest: score_string@mut as u8[^]mut)
    # white_score - black_score == score
    # white_score + black_score == 64
    let black_score = (64 - score) / 2
    let white_score = 64 - black_score
    score_string@mut[4]@mut as u8[2]^mut.make_score_string0(player_score: black_score, color: false)
    score_string@mut[9]@mut as u8[2]^mut.make_score_string0(player_score: white_score, color: true)
    score_string

fn make_score_string0(string: u8[2]^mut, player_score: usize, color: bool):
    let tens_digit = (player_score / 10) as u8
    let ones_digit = player_score as u8 - tens_digit * 10_u8
    let ascii_zero = 0x30_u8
    let ascii_space = 0x20_u8
    if tens_digit == 0_u8:
        # left or right align
        if color:
            string[0] = ones_digit + ascii_zero
            string[1] = ascii_space
        else:
            string[0] = ascii_space
            string[1] = ones_digit + ascii_zero
    else:
        string[0] = tens_digit + ascii_zero
        string[1] = ones_digit + ascii_zero

fn end_game(anon _: App^):
    let score = self^.board@.board_score()
    let score_string = make_score_string(:score)
    let msg = if score == 0:
        "  It's a tie!  "
    else if score > 1_000_000: # who needs signed comparisons?
        "  Black wins!  "
    else
        "  White wins!  "
    # we use spaces because `draw_str_to_overlay` reads out of bounds on empty strings
    self^.window^@.message_box(
        line_1: " "
        line_2: msg
        line_3: score_string@ as u8[^]
    )

fn handle_mouse_click(anon _: App^mut, x: usize, y: usize):
    let x = (x / 32) as u8
    let y = (y / 32) as u8
    :
        let mut x = 0_u8
        while x < 8_u8:
            defer x = x + 1_u8
            let mut y = 0_u8
            while y < 8_u8:
                defer y = y + 1_u8
                .draw_stone_finished(:x, :y)
    self^.previous_board = self^.board
    let move_result = self^.board@mut.make_move(:x, :y)
    self^.anim_timer = 0x8000u32
    self^.prev_move = x as u16 << 8u16 + y as u16
    #._redraw_board()
    if move_result == MOVE_INVALID or move_result == MOVE_OK: 0
    else if move_result == MOVE_PASS: self^.window^@.message_box_pass()
    else if move_result == MOVE_END: self^@.end_game()
    else panic("invalid move result")
                

struct MenuItem:
    menu: usize
    item: usize

fn menu_item_panic(menu_item: MenuItem):
    panic("unknown menu item")

fn handle_menu_click(anon _: App^mut, anon menu_item: MenuItem):
    let q = menu_item
    let p = menu_item_panic
    let menu = q.menu
    let item = q.item
    # Game
    if menu == 0:
        # New Game
        if item == 0:
            self^ = App(
                :self^.window
                board: board_new()
                previous_board: self^.board
                anim_timer: -1u32
                :self^.anim_speed
                prev_move: 0u16
                prev_millis: 0
                :self^.preview_radius
            )
            ._redraw_board()
            self^.previous_board = self^.board
        else:
            q.p()
    # Board
    else if menu == 1:
        # Toggle Move Preview
        if item == 0:
            let new_radius = if self^.preview_radius != 0:
                0
            else:
                PREVIEW_RADIUS_DEFAULT
            ._reset_preview_radius(new_radius)
        else:
            q.p()
    # Info
    else if menu == 2:
        # About Reversi...
        if item == 0:
            self^.window^@.message_box_about()
        else:
            q.p()
    else:
        q.p()

fn close_app(anon _: App^mut): 0

fn main(_: File^mut):
    let mut window = (null() as Window^)^
    let window = window@mut
    window.new_window(
        title: "Reversi"
        width: WINDOW_WIDTH as u16
        height: WINDOW_HEIGHT as u16
        x: (640 - WINDOW_WIDTH) as u16 / 2_u16
        y: (480 - WINDOW_HEIGHT) as u16 / 2_u16
        menu_bar: get_reversi_menu()
        widgets: null()
    )
    defer window.destroy_window()

    let mut app = new_app(:window)
    let app = app@mut
    defer app.close_app()

    let mut menu_item = MenuItem(menu: -1, item: -1)
    let mut running = true
    while running:
        app.app_draw()
        yield_task()
        let mut event = Event(kind: EVENT_TYPE_MOUSE_CLICK, parameters: (null() as usize[7]^)^)
        while event.kind != EVENT_TYPE_EMPTY:
            event = window.get_next_window_event()
            if event.kind == EVENT_TYPE_EMPTY:
                0
            else if event.kind == EVENT_TYPE_MOUSE_CLICK:
                let x = event.parameters@[0]
                let y = event.parameters@[1]
                if y < 16 and x >= 8:
                    window.start_dragging_window()
            else if event.kind == EVENT_TYPE_MOUSE_RELEASE:
                let x = event.parameters@[0]
                let y = event.parameters@[1]
                if y < 16:
                    if x < 8:
                        running = false
                else:
                    app.handle_mouse_click(:x, y: y - 16)
            else if event.kind == EVENT_TYPE_KEY_DOWN:
                let key = event.parameters@[0]
                if key == KEY_LSHIFT or key == KEY_RSHIFT:
                    shift_pressed()
                else if key == KEY_CAPS:
                    caps_pressed()
            else if event.kind == EVENT_TYPE_KEY_UP:
                let key = event.parameters@[0]
                if key == KEY_LSHIFT or key == KEY_RSHIFT:
                    shift_released()
            else if event.kind == EVENT_TYPE_MENU_BAR_CLICK:
                let x = event.parameters@[0]
                let _y = event.parameters@[1]
                menu_bar_click_event(:window^.menu_bar, :x)
            else if event.kind == EVENT_TYPE_MENU_UPDATE:
                let selected_menu_bar_item = event.parameters@[1]
                let hovering_menu_item = event.parameters@[2]
                menu_update_event(
                    :window^.menu_bar
                    :selected_menu_bar_item
                    :hovering_menu_item
                    _unused: 0
                )
            else if event.kind == EVENT_TYPE_MENU_CLICK:
                let menu = event.parameters@[1]
                let item = event.parameters@[2]
                # we defer handling menu clicks until after the menu closes because fox32os doesn't like menus and messageboxes being open at the same time
                assert(menu_item.menu == -1, "stale menu item menu")
                assert(menu_item.menu == -1, "stale menu item item")
                menu_item = MenuItem(:menu, :item)
            else if event.kind == EVENT_TYPE_MENU_ACK:
                close_menu(:window^.menu_bar)
                app.handle_menu_click(menu_item)
                menu_item = MenuItem(menu: -1, item: -1)
            else:
                .write("WARNING unknown event type=")
                .write_usize(event.kind)
                .write("\n")

fn message_box_pass(anon window: Window^):
    .message_box(
        line_1: "The current player"
        line_2: "has no moves and"
        line_3: "will pass."
    )

fn message_box(anon window: Window^, line_1: u8[^], line_2: u8[^], line_3: u8[^]):
    let width_chars = line_1.string_length()
        .max(line_2.string_length())
        .max(line_3.string_length())
    let width = (width_chars * 8 + 16) as u16
    let x = window^.x + (WINDOW_WIDTH as u16 - width) / 2_u16
    let y = window^.y + (WINDOW_HEIGHT as u16 + 16_u16 - 88_u16) / 2_u16
    new_messagebox(:line_1, :line_2, :line_3, :x, :y, :width)
